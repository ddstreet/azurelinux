From 9a71abe4aea86ee5efeb734adaec0ed5f9ece154 Mon Sep 17 00:00:00 2001
From: "Madhavan T. Venkataraman" <madvenka@linux.microsoft.com>
Date: Wed, 10 Jul 2024 04:54:46 -0500
Subject: [PATCH 50/68] Free module init sections hcall

Implement a hypercall to set default permissions (RW) for the init
sections of a VTL0 module. These need to be freed after module init.
So, their EPT permissions must be restored to RW.

Along with this, also set the EPT permissions of the ro_after_init
data section of a module to R__ (read-only).

Signed-off-by: Madhavan T. Venkataraman <madvenka@linux.microsoft.com>
---
 drivers/hv/mshv_vsm_vtl1.c | 56 ++++++++++++++++++++++++++++++++++++++
 1 file changed, 56 insertions(+)

diff --git a/drivers/hv/mshv_vsm_vtl1.c b/drivers/hv/mshv_vsm_vtl1.c
index ec6fd16675ea..57ffc6bda2cc 100644
--- a/drivers/hv/mshv_vsm_vtl1.c
+++ b/drivers/hv/mshv_vsm_vtl1.c
@@ -1236,6 +1236,58 @@ static int vsm_set_guest_module_permissions(struct heki_mod *hmod)
 	return err;
 }
 
+static int vsm_free_guest_module_init(long token)
+{
+	struct heki_mod *hmod;
+	bool found;
+	unsigned long permissions;
+	int err = 0;
+
+	mutex_lock(&vtl0.lock);
+
+	found = false;
+	list_for_each_entry(hmod, &vtl0.modules, node) {
+		if (hmod->token == token) {
+			found = true;
+			break;
+		}
+	}
+
+	if (!found) {
+		/* Silently ignore the request. */
+		goto unlock;
+	}
+
+	for_each_mod_mem_type(type) {
+		bool free = true;
+
+		switch (type) {
+		case MOD_RO_AFTER_INIT:
+			permissions = MEM_ATTR_READ;
+			free = false;
+			break;
+		case MOD_INIT_TEXT:
+			permissions = MEM_ATTR_READ | MEM_ATTR_WRITE;
+			break;
+		case MOD_INIT_DATA:
+			permissions = MEM_ATTR_READ | MEM_ATTR_WRITE;
+			break;
+		case MOD_INIT_RODATA:
+			permissions = MEM_ATTR_READ | MEM_ATTR_WRITE;
+			break;
+		default:
+			continue;
+		}
+
+		err = vsm_set_module_permissions(hmod, type, permissions, free);
+		if (err)
+			break;
+	}
+unlock:
+	mutex_unlock(&vtl0.lock);
+	return err;
+}
+
 static void vsm_resolve_func(char *name, Elf64_Sym *sym);
 
 static long mshv_vsm_validate_guest_module(u64 pa, unsigned long nranges,
@@ -1686,6 +1738,10 @@ static void mshv_vsm_handle_entry(struct hv_vtlcall_param *_vtl_params)
 							_vtl_params->a2,
 							_vtl_params->a3);
 		break;
+	case VSM_VTL_CALL_FUNC_ID_FREE_MODULE_INIT:
+		pr_debug("%s : VSM_FREE_MODULE_INIT\n", __func__);
+		status = vsm_free_guest_module_init(_vtl_params->a1);
+		break;
 	default:
 		pr_err("%s: Wrong Command:0x%llx sent into VTL1\n", __func__, _vtl_params->a0);
 		break;
-- 
2.43.0

