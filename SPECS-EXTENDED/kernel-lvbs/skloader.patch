diff -urpN a/Microsoft/skloader/boot.c b/Microsoft/skloader/boot.c
--- a/Microsoft/skloader/boot.c	1969-12-31 19:00:00.000000000 -0500
+++ b/Microsoft/skloader/boot.c	2024-12-05 12:27:52.486292027 -0500
@@ -0,0 +1,71 @@
+#include "stdio.h"
+#include "stdint.h"
+#include "bootparam.h"
+#include "inc.h"
+
+#define	KERNEL_START_OFFSET	0x200000
+#define CMDLINE_SIZE		512
+
+struct boot_params bootparams;
+char cmdline[CMDLINE_SIZE] = "noxsave possible_cpus=";
+
+static void add_e820_entry(uint64_t start_addr, uint64_t end_addr, uint32_t type)
+{
+	struct boot_e820_entry *entry = &(bootparams.e820_table[bootparams.e820_entries++]);
+	
+	entry->addr = start_addr;
+        entry->size = end_addr - start_addr;
+        entry->type = type;
+}
+
+static void populate_possible_cpus(int cpus)
+{
+	int i = 0, count = 0, __cpus = cpus;
+
+	while (__cpus) {
+		__cpus /= 10;
+		count++;
+	}
+
+	while (cmdline[i] != '\0')
+		i++;
+
+	i+=count;
+	cmdline[i--] = '\0';
+
+	while(count--) {
+		cmdline[i--] = (cpus % 10) + '0';
+		cpus = cpus /= 10;
+	}
+}
+
+struct boot_params* build_boot_params(int possible_cpus, uint64_t start_phys_mem,
+				      uint64_t end_phys_mem, uint64_t total_mem)
+{
+	uint64_t cmdline_ptr = (uint64_t)cmdline;
+
+	serial_write("Building boot params\n");
+	populate_possible_cpus(possible_cpus);
+	bootparams.hdr.type_of_loader = 0xFF;
+	bootparams.hdr.hardware_subarch = X86_SUBARCH_LGUEST;
+	bootparams.hdr.cmd_line_ptr = cmdline_ptr & 0xFFFFFFFF;
+	bootparams.ext_cmd_line_ptr = (cmdline_ptr >> 32) & 0xFFFFFFFF;
+	add_e820_entry(0, start_phys_mem, E820_RESERVED);
+	add_e820_entry(start_phys_mem, end_phys_mem, E820_RAM);
+	add_e820_entry(end_phys_mem, total_mem, E820_RESERVED);
+
+	return &bootparams;
+}
+
+void start_kernel(uint64_t possible_cpus, uint64_t start_phys_mem,
+		  uint64_t end_phys_mem, uint64_t total_mem)
+{
+	void (*__start_kernel)(uint64_t, struct boot_params*);
+	serial_init();
+	serial_write("*******************SECURE KERNEL LOADER*******************\n");
+	hv_init_hypercalls();
+	build_boot_params((int)possible_cpus, start_phys_mem, end_phys_mem, total_mem);
+	serial_write("Starting Kernel............\n\n");
+	__start_kernel = (void(*)(uint64_t, struct boot_params*))(start_phys_mem + KERNEL_START_OFFSET);
+	__start_kernel(0, &bootparams);
+}
diff -urpN a/Microsoft/skloader/bootparam.h b/Microsoft/skloader/bootparam.h
--- a/Microsoft/skloader/bootparam.h	1969-12-31 19:00:00.000000000 -0500
+++ b/Microsoft/skloader/bootparam.h	2024-12-05 12:27:52.486292027 -0500
@@ -0,0 +1,280 @@
+/* SPDX-License-Identifier: GPL-2.0 WITH Linux-syscall-note */
+#ifndef _ASM_X86_BOOTPARAM_H
+#define _ASM_X86_BOOTPARAM_H
+
+#define E820_RAM        1
+#define E820_RESERVED   2
+#define E820_ACPI       3
+#define E820_NVS        4
+#define E820_UNUSABLE   5
+#define E820_PMEM       7
+
+/* setup_data/setup_indirect types */
+#define SETUP_NONE			0
+#define SETUP_E820_EXT			1
+#define SETUP_DTB			2
+#define SETUP_PCI			3
+#define SETUP_EFI			4
+#define SETUP_APPLE_PROPERTIES		5
+#define SETUP_JAILHOUSE			6
+
+#define SETUP_INDIRECT			(1<<31)
+
+/* SETUP_INDIRECT | max(SETUP_*) */
+#define SETUP_TYPE_MAX			(SETUP_INDIRECT | SETUP_JAILHOUSE)
+
+/* ram_size flags */
+#define RAMDISK_IMAGE_START_MASK	0x07FF
+#define RAMDISK_PROMPT_FLAG		0x8000
+#define RAMDISK_LOAD_FLAG		0x4000
+
+/* loadflags */
+#define LOADED_HIGH	(1<<0)
+#define KASLR_FLAG	(1<<1)
+#define QUIET_FLAG	(1<<5)
+#define KEEP_SEGMENTS	(1<<6)
+#define CAN_USE_HEAP	(1<<7)
+
+/* xloadflags */
+#define XLF_KERNEL_64			(1<<0)
+#define XLF_CAN_BE_LOADED_ABOVE_4G	(1<<1)
+#define XLF_EFI_HANDOVER_32		(1<<2)
+#define XLF_EFI_HANDOVER_64		(1<<3)
+#define XLF_EFI_KEXEC			(1<<4)
+#define XLF_5LEVEL			(1<<5)
+#define XLF_5LEVEL_ENABLED		(1<<6)
+
+#ifndef __ASSEMBLY__
+
+#include <linux/types.h>
+#include <linux/screen_info.h>
+#include <linux/apm_bios.h>
+#include <linux/edd.h>
+#include <asm/ist.h>
+#include <video/edid.h>
+
+/* extensible setup data list node */
+struct setup_data {
+	__u64 next;
+	__u32 type;
+	__u32 len;
+	__u8 data[0];
+};
+
+/* extensible setup indirect data node */
+struct setup_indirect {
+	__u32 type;
+	__u32 reserved;  /* Reserved, must be set to zero. */
+	__u64 len;
+	__u64 addr;
+};
+
+struct setup_header {
+	__u8	setup_sects;
+	__u16	root_flags;
+	__u32	syssize;
+	__u16	ram_size;
+	__u16	vid_mode;
+	__u16	root_dev;
+	__u16	boot_flag;
+	__u16	jump;
+	__u32	header;
+	__u16	version;
+	__u32	realmode_swtch;
+	__u16	start_sys_seg;
+	__u16	kernel_version;
+	__u8	type_of_loader;
+	__u8	loadflags;
+	__u16	setup_move_size;
+	__u32	code32_start;
+	__u32	ramdisk_image;
+	__u32	ramdisk_size;
+	__u32	bootsect_kludge;
+	__u16	heap_end_ptr;
+	__u8	ext_loader_ver;
+	__u8	ext_loader_type;
+	__u32	cmd_line_ptr;
+	__u32	initrd_addr_max;
+	__u32	kernel_alignment;
+	__u8	relocatable_kernel;
+	__u8	min_alignment;
+	__u16	xloadflags;
+	__u32	cmdline_size;
+	__u32	hardware_subarch;
+	__u64	hardware_subarch_data;
+	__u32	payload_offset;
+	__u32	payload_length;
+	__u64	setup_data;
+	__u64	pref_address;
+	__u32	init_size;
+	__u32	handover_offset;
+	__u32	kernel_info_offset;
+} __attribute__((packed));
+
+struct sys_desc_table {
+	__u16 length;
+	__u8  table[14];
+};
+
+/* Gleaned from OFW's set-parameters in cpu/x86/pc/linux.fth */
+struct olpc_ofw_header {
+	__u32 ofw_magic;	/* OFW signature */
+	__u32 ofw_version;
+	__u32 cif_handler;	/* callback into OFW */
+	__u32 irq_desc_table;
+} __attribute__((packed));
+
+struct efi_info {
+	__u32 efi_loader_signature;
+	__u32 efi_systab;
+	__u32 efi_memdesc_size;
+	__u32 efi_memdesc_version;
+	__u32 efi_memmap;
+	__u32 efi_memmap_size;
+	__u32 efi_systab_hi;
+	__u32 efi_memmap_hi;
+};
+
+/*
+ * This is the maximum number of entries in struct boot_params::e820_table
+ * (the zeropage), which is part of the x86 boot protocol ABI:
+ */
+#define E820_MAX_ENTRIES_ZEROPAGE 128
+
+/*
+ * The E820 memory region entry of the boot protocol ABI:
+ */
+struct boot_e820_entry {
+	__u64 addr;
+	__u64 size;
+	__u32 type;
+} __attribute__((packed));
+
+/*
+ * Smallest compatible version of jailhouse_setup_data required by this kernel.
+ */
+#define JAILHOUSE_SETUP_REQUIRED_VERSION	1
+
+/*
+ * The boot loader is passing platform information via this Jailhouse-specific
+ * setup data structure.
+ */
+struct jailhouse_setup_data {
+	struct {
+		__u16	version;
+		__u16	compatible_version;
+	} __attribute__((packed)) hdr;
+	struct {
+		__u16	pm_timer_address;
+		__u16	num_cpus;
+		__u64	pci_mmconfig_base;
+		__u32	tsc_khz;
+		__u32	apic_khz;
+		__u8	standard_ioapic;
+		__u8	cpu_ids[255];
+	} __attribute__((packed)) v1;
+	struct {
+		__u32	flags;
+	} __attribute__((packed)) v2;
+} __attribute__((packed));
+
+/* The so-called "zeropage" */
+struct boot_params {
+	struct screen_info screen_info;			/* 0x000 */
+	struct apm_bios_info apm_bios_info;		/* 0x040 */
+	__u8  _pad2[4];					/* 0x054 */
+	__u64  tboot_addr;				/* 0x058 */
+	struct ist_info ist_info;			/* 0x060 */
+	__u64 acpi_rsdp_addr;				/* 0x070 */
+	__u8  _pad3[8];					/* 0x078 */
+	__u8  hd0_info[16];	/* obsolete! */		/* 0x080 */
+	__u8  hd1_info[16];	/* obsolete! */		/* 0x090 */
+	struct sys_desc_table sys_desc_table; /* obsolete! */	/* 0x0a0 */
+	struct olpc_ofw_header olpc_ofw_header;		/* 0x0b0 */
+	__u32 ext_ramdisk_image;			/* 0x0c0 */
+	__u32 ext_ramdisk_size;				/* 0x0c4 */
+	__u32 ext_cmd_line_ptr;				/* 0x0c8 */
+	__u8  _pad4[116];				/* 0x0cc */
+	struct edid_info edid_info;			/* 0x140 */
+	struct efi_info efi_info;			/* 0x1c0 */
+	__u32 alt_mem_k;				/* 0x1e0 */
+	__u32 scratch;		/* Scratch field! */	/* 0x1e4 */
+	__u8  e820_entries;				/* 0x1e8 */
+	__u8  eddbuf_entries;				/* 0x1e9 */
+	__u8  edd_mbr_sig_buf_entries;			/* 0x1ea */
+	__u8  kbd_status;				/* 0x1eb */
+	__u8  secure_boot;				/* 0x1ec */
+	__u8  _pad5[2];					/* 0x1ed */
+	/*
+	 * The sentinel is set to a nonzero value (0xff) in header.S.
+	 *
+	 * A bootloader is supposed to only take setup_header and put
+	 * it into a clean boot_params buffer. If it turns out that
+	 * it is clumsy or too generous with the buffer, it most
+	 * probably will pick up the sentinel variable too. The fact
+	 * that this variable then is still 0xff will let kernel
+	 * know that some variables in boot_params are invalid and
+	 * kernel should zero out certain portions of boot_params.
+	 */
+	__u8  sentinel;					/* 0x1ef */
+	__u8  _pad6[1];					/* 0x1f0 */
+	struct setup_header hdr;    /* setup header */	/* 0x1f1 */
+	__u8  _pad7[0x290-0x1f1-sizeof(struct setup_header)];
+	__u32 edd_mbr_sig_buffer[EDD_MBR_SIG_MAX];	/* 0x290 */
+	struct boot_e820_entry e820_table[E820_MAX_ENTRIES_ZEROPAGE]; /* 0x2d0 */
+	__u8  _pad8[48];				/* 0xcd0 */
+	struct edd_info eddbuf[EDDMAXNR];		/* 0xd00 */
+	__u8  _pad9[276];				/* 0xeec */
+} __attribute__((packed));
+
+/**
+ * enum x86_hardware_subarch - x86 hardware subarchitecture
+ *
+ * The x86 hardware_subarch and hardware_subarch_data were added as of the x86
+ * boot protocol 2.07 to help distinguish and support custom x86 boot
+ * sequences. This enum represents accepted values for the x86
+ * hardware_subarch.  Custom x86 boot sequences (not X86_SUBARCH_PC) do not
+ * have or simply *cannot* make use of natural stubs like BIOS or EFI, the
+ * hardware_subarch can be used on the Linux entry path to revector to a
+ * subarchitecture stub when needed. This subarchitecture stub can be used to
+ * set up Linux boot parameters or for special care to account for nonstandard
+ * handling of page tables.
+ *
+ * These enums should only ever be used by x86 code, and the code that uses
+ * it should be well contained and compartmentalized.
+ *
+ * KVM and Xen HVM do not have a subarch as these are expected to follow
+ * standard x86 boot entries. If there is a genuine need for "hypervisor" type
+ * that should be considered separately in the future. Future guest types
+ * should seriously consider working with standard x86 boot stubs such as
+ * the BIOS or EFI boot stubs.
+ *
+ * WARNING: this enum is only used for legacy hacks, for platform features that
+ *	    are not easily enumerated or discoverable. You should not ever use
+ *	    this for new features.
+ *
+ * @X86_SUBARCH_PC: Should be used if the hardware is enumerable using standard
+ *	PC mechanisms (PCI, ACPI) and doesn't need a special boot flow.
+ * @X86_SUBARCH_LGUEST: Used for x86 hypervisor demo, lguest, deprecated
+ * @X86_SUBARCH_XEN: Used for Xen guest types which follow the PV boot path,
+ * 	which start at asm startup_xen() entry point and later jump to the C
+ * 	xen_start_kernel() entry point. Both domU and dom0 type of guests are
+ * 	currently supported through this PV boot path.
+ * @X86_SUBARCH_INTEL_MID: Used for Intel MID (Mobile Internet Device) platform
+ *	systems which do not have the PCI legacy interfaces.
+ * @X86_SUBARCH_CE4100: Used for Intel CE media processor (CE4100) SoC
+ * 	for settop boxes and media devices, the use of a subarch for CE4100
+ * 	is more of a hack...
+ */
+enum x86_hardware_subarch {
+	X86_SUBARCH_PC = 0,
+	X86_SUBARCH_LGUEST,
+	X86_SUBARCH_XEN,
+	X86_SUBARCH_INTEL_MID,
+	X86_SUBARCH_CE4100,
+	X86_NR_SUBARCHS,
+};
+
+#endif /* __ASSEMBLY__ */
+
+#endif /* _ASM_X86_BOOTPARAM_H */
diff -urpN a/Microsoft/skloader/counter.c b/Microsoft/skloader/counter.c
--- a/Microsoft/skloader/counter.c	1969-12-31 19:00:00.000000000 -0500
+++ b/Microsoft/skloader/counter.c	2024-12-05 12:27:52.486292027 -0500
@@ -0,0 +1,8 @@
+#include <stdint.h>
+
+int entry_counter = 0x0;
+
+int get_entry_count()
+{
+	return ++entry_counter;
+}
diff -urpN a/Microsoft/skloader/hyper.c b/Microsoft/skloader/hyper.c
--- a/Microsoft/skloader/hyper.c	1969-12-31 19:00:00.000000000 -0500
+++ b/Microsoft/skloader/hyper.c	2024-12-05 12:27:52.487292026 -0500
@@ -0,0 +1,72 @@
+#include <stdint.h>
+#include "inc.h"
+
+#define LINUX_VERSION_CODE 266002
+#define PKG_ABI 0
+
+#define HV_CANONICAL_VENDOR_ID  0x80
+#define HV_LINUX_VENDOR_ID      0x8100
+
+#define HV_X64_MSR_GUEST_OS_ID  0x40000000
+#define HV_X64_MSR_HYPERCALL    0x40000001
+
+union hv_x64_msr_hypercall_contents {
+    uint64_t as_uint64;
+    struct {
+        uint64_t enable:1;
+        uint64_t reserved:11;
+        uint64_t guest_physical_address:52;
+    };
+};
+
+static inline void write_msr(uint64_t msr, uint64_t value)
+{
+    uint32_t low = value & 0xFFFFFFFF;
+    uint32_t high = value >> 32;
+
+    asm volatile (
+        "wrmsr"
+        :
+        : "c"(msr), "a"(low), "d"(high)
+    );
+}
+
+static inline uint64_t read_msr(uint64_t msr)
+{
+    uint32_t low, high;
+
+    asm volatile (
+        "rdmsr"
+        : "=a"(low), "=d"(high)
+        : "c"(msr)
+    );
+
+    return ((uint64_t)high << 32) | low;
+}
+
+static inline  uint64_t hv_generate_guest_id(uint64_t d_info1,
+    uint64_t kernel_version, uint64_t d_info2)
+{
+    uint64_t guest_id = 0;
+
+    guest_id = (((uint64_t)HV_LINUX_VENDOR_ID) << 48);
+    guest_id |= (d_info1 << 48);
+    guest_id |= (kernel_version << 16);
+    guest_id |= d_info2;
+
+    return guest_id;
+}
+
+void hv_init_hypercalls(void)
+{
+    uint64_t guest_id;
+    union hv_x64_msr_hypercall_contents hypercall_msr;
+
+    guest_id = hv_generate_guest_id(HV_CANONICAL_VENDOR_ID, LINUX_VERSION_CODE,
+        PKG_ABI);
+    write_msr(HV_X64_MSR_GUEST_OS_ID, guest_id);
+
+    hypercall_msr.as_uint64 = read_msr(HV_X64_MSR_HYPERCALL);
+    hypercall_msr.enable = 1;
+    write_msr(HV_X64_MSR_HYPERCALL, hypercall_msr.as_uint64);
+}
diff -urpN a/Microsoft/skloader/inc.h b/Microsoft/skloader/inc.h
--- a/Microsoft/skloader/inc.h	1969-12-31 19:00:00.000000000 -0500
+++ b/Microsoft/skloader/inc.h	2024-12-05 12:27:52.487292026 -0500
@@ -0,0 +1,4 @@
+
+void hv_init_hypercalls(void);
+void serial_init(void);
+void serial_write(char *str);
diff -urpN a/Microsoft/skloader/Makefile b/Microsoft/skloader/Makefile
--- a/Microsoft/skloader/Makefile	1969-12-31 19:00:00.000000000 -0500
+++ b/Microsoft/skloader/Makefile	2024-12-05 12:27:52.487292026 -0500
@@ -0,0 +1,36 @@
+.PHONY: all
+all: skloader.bin
+
+start.o: start.S
+	@echo " AS     $@"
+	@gcc -c $< -o $@
+
+hyper.o: hyper.c
+	@echo " AS     $@"
+	@gcc -c $< -o $@
+
+counter.o: counter.c
+	@echo " AS     $@"
+	@gcc -c $< -o $@
+
+serial.o: serial.c
+	@echo " AS     $@"
+	@gcc -c $< -o $@
+
+boot.o: boot.c
+	@echo " AS     $@"
+	@gcc -c $< -o $@
+
+skloader.elf: start.o hyper.o counter.o serial.o boot.o skloader.ld
+	@echo " LD    $@"
+	@ld start.o hyper.o counter.o serial.o boot.o -T skloader.ld -o $@
+
+skloader.bin: skloader.elf
+	@echo " OBJCPY   $@"
+	@objcopy -O binary $< $@
+
+.PHONY: clean
+clean:
+	@-rm *.o
+	@-rm *.elf
+	@-rm *.bin
diff -urpN a/Microsoft/skloader/README.md b/Microsoft/skloader/README.md
--- a/Microsoft/skloader/README.md	1969-12-31 19:00:00.000000000 -0500
+++ b/Microsoft/skloader/README.md	2024-12-05 12:27:52.487292026 -0500
@@ -0,0 +1,8 @@
+Simple bootloader to load linux in VTL1.
+Compiled to be loaded at 0x8000000 (no relocation support)
+
+To build:
+	make
+
+Output:
+	skloader.bin
diff -urpN a/Microsoft/skloader/serial.c b/Microsoft/skloader/serial.c
--- a/Microsoft/skloader/serial.c	1969-12-31 19:00:00.000000000 -0500
+++ b/Microsoft/skloader/serial.c	2024-12-05 12:27:52.487292026 -0500
@@ -0,0 +1,41 @@
+#include <stdint.h>
+#include "inc.h"
+
+#define COM2	0x2F8
+
+static inline void outb(uint16_t port, uint8_t data)
+{
+	asm volatile ("outb %0, %1"
+			:
+			: "a"(data), "d"(port));
+}
+static inline uint8_t inb(uint16_t port)
+{
+	uint8_t data;
+	asm volatile ("inb %1, %0"
+			: "=a"(data)
+			: "d"(port));
+}
+
+void serial_writeb(char ch)
+{
+	while ((inb(COM2 + 5) & 0x20) == 0);
+	outb(COM2, ch);
+}
+
+void serial_write(char *str)
+{
+	while (*str) {
+		if (*str == '\n')
+			serial_writeb('\r');
+		serial_writeb(*str);
+		str++;
+	}
+}
+
+void serial_init(void)
+{
+	outb(COM2 + 1, 0x00); // Disable all interrupts
+	outb(COM2 + 2, 0xC7); // Enable FIFO, clear them, with 14-byte threshold
+	outb(COM2 + 4, 0x0F);
+}
diff -urpN a/Microsoft/skloader/skloader.ld b/Microsoft/skloader/skloader.ld
--- a/Microsoft/skloader/skloader.ld	1969-12-31 19:00:00.000000000 -0500
+++ b/Microsoft/skloader/skloader.ld	2024-12-05 12:27:52.488292026 -0500
@@ -0,0 +1,19 @@
+ENTRY(_start)
+SECTIONS
+{
+	.text : {
+	   KEEP(*(.text))
+        }
+	.rodata : {
+		KEEP(*(.rodata))
+	}
+	.data : {
+        	*(.data)
+	}
+     .bss : {
+        __bss_start = .;
+        *(.bss)
+        *(COMMON)
+        __bss_end = .; 
+    }
+}
diff -urpN a/Microsoft/skloader/start.S b/Microsoft/skloader/start.S
--- a/Microsoft/skloader/start.S	1969-12-31 19:00:00.000000000 -0500
+++ b/Microsoft/skloader/start.S	2024-12-05 12:27:52.488292026 -0500
@@ -0,0 +1,34 @@
+.extern start_kernel
+
+.macro FUNC name
+    .section .text
+    .global \name
+    .func \name
+    .type \name, %function
+    \name:
+.endm
+
+.macro ENDFUNC name
+    .size \name, . - \name
+    .endfunc
+.endm
+
+/*
+ * Guest kernel passes the following arguments
+ * rdi: num_possible_cpus
+ * rsi: start of secure kernel physical addr space
+ * rdx: end of secure kernel physical addr space
+ * r8: Total guest physical addr space
+ */
+FUNC _start
+    pushq %rdi // Save rdi. Will be retrieved later to pass to start_kernel
+    lea __bss_start(%rip), %rdi
+    lea __bss_end(%rip), %rcx
+    sub %rdi, %rcx
+    xor %eax, %eax
+    cld
+    rep stosb
+    popq %rdi
+    mov %r8, %rcx // Mov argument in r8 to rcx thus following the x86 function calling convention
+    call start_kernel // First four arguments in rdi, rsi, rdx and rcx
+ENDFUNC _start
